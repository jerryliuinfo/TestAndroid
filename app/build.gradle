apply plugin: 'com.android.application'

apply from : rootProject.file('build_chapter_6.gradle')

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'
    defaultConfig {
        defaultPublishConfig "debug"
        publishNonDefault true
        applicationId "com.apache.android.testAndroid"
        minSdkVersion 17
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    compileOptions{
        encoding 'utf-8'
//        sourceCompatibility = JavaVersion.VERSION_1_8
//        targetCompatibility = JavaVersion.VERSION_1_8
    }

    adbOptions{

    }

    dexOptions{

    }

    buildTypes {

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }



    productFlavors{
        dev{
            //manifestPlaceholders.put("CHANNEL_VALUE", "dev")
            dimension "debug"
        }


        productFlavors.all{ flavor ->
            manifestPlaceholders.put("CHANNEL_VALUE", name)
        }
    }

    applicationVariants.all{ variant ->
        variant.outputs.each { output ->
            def outPutFile = output.outputFile;
            if (outPutFile != null && outPutFile.name.endsWith(".apk")){
                def flavorName = variant.flavorName;
                def buildType = variant.buildType.name;
                def publishVersionName = variant.versionName + "_"+variant.versionCode


                def appVersionName = getAppVersionName();
                println "appVersionName:${appVersionName}"

                def apkName = "TestAndroid_${appVersionName}_${flavorName}_${buildType}.apk"
                def apkFile = new File(outPutFile.getParent(), apkName)
                //output.outputFile = apkFile


            }
        }

    }

}


task ex65SourceSetTask << {
    sourceSets.all{
        println "sourceSets name is ${name}"
    }
}


task ex65TestTask << {
    println "ex65Test ${name}"
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    /*androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })*/
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.0'
   // testCompile 'junit:junit:4.12'
    compile "io.reactivex:rxjava:1.1.5"
    compile "io.reactivex:rxandroid:1.2.0"


//    compile 'io.reactivex.rxjava2:rxjava:2.1.3'
//    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
}



apply plugin: Ex53CustomPlugin

class Ex53CustomPlugin implements Plugin<Project>{

    @Override
    void apply(Project target) {
        target.task('ex53CustomTask').doLast(){
            println '这是一个通过自定义插件创建的任务'
        }
    }
}


def buildTime(){
    Date date = new Date();
    def fromatDate = date.format("yyyyMMdd hh:mm:ss")
}


def getAppVersionName(){
    //def cmd = 'git describe --abbrev=0 --tags'
    def cmd = 'git rev-list HEAD --count';
    return cmd.execute().text.trim();
}