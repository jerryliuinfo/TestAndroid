// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: rootProject.file('build_chapter_4.gradle')
apply from: rootProject.file('build_chapter_5.gradle')
apply from: rootProject.file('build_chapter_6.gradle')
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


task hello{
    doFirst{
        println('doFirst, I love QuanJiao')
    }

    doLast {
        println 'doLast hello world, I love QuanJiao'
        logger.debug('debug日志信息')
    }
}


task connectCheck{
    doLast{
        println 'doLast connectCheck'
    }
}


task printStringClass << {
    def str1 = '单引号'
    def str2 = "双引号"


    println "单引号定义的字符串类型:"+str1.getClass().name
    println "单引号定义的字符串类型:"+str2.getClass().name


    def name = "张三"
    println '单引号的变量计算;${name}'
    println "双引号的变量计算:${name}"


}


task printList << {
    def numList = [1,2,3,4,5]
    println numList.getClass().name

    println numList[1]
    println numList[2]
    println numList[-1]
    println numList[-2]
    println numList[1..3]

    numList.each {
        println it
    }

}

task printMap << {
    def map1 = ['width':1024, 'height':768]
    println map1.getClass().getName()

    println "wdith : ${map1['width']}"
    println "height: ${map1['height']}"

    println "width: ${map1.width}, height:${map1.height}"

    map1.each {
        println "key: ${it.key}, value:${it.value}"
    }
}

task invokeMethod << {
    method1(2,3)
    method1 3,4
}

def method1(int a, int b){
    println "result: ${a + b}"
}


task printMehtodReturn << {
    def add1 = method2(1,3)
    def add2 = method2(5,2)
    println "add1: ${add1}, add2: ${add2}"
}

def method2(int a, int b){
    if (a > b){
        a
    }else {
        b
    }
}

class Person{
    private String name;
    public int age;

    public int getAge(){
        12
    }

    public int setAge(int age){
        this.age = age;
    }


    def dumpPerson(){
        println "name is ${name}, age is ${age}"
    }
}

task HelloJavaBean{
    Person person = new Person();
    println "name:${person.name}, age:${person.age}"

    person.name = "zhangsan"
    person.age = 13;
    println "name:${person.name}, age:${person.age}"
}


task helloClosuere << {
    customEach{
        println it
    }
}

def customEach(clo){
    for (int i in 1..10){
        clo(i)
    }
}


task helloClosure << {
    eachMap{ a,b ->
            println "key: ${a}, value: ${b}"
    }
}
def eachMap(closure){
    def map1 = ["name":"zhangsan", "age":18]
    map1.each {
        closure(it.key,it.value)
    }
}

task helloDelegate << {
    new Delegate().test {
        println "thisObject:${thisObject.getClass()}"
        println "owner:${owner.getClass()}"
        println "delegate:${delegate.getClass()}"
        method1()
        it.method1()
    }
}

def method1(){
    println "context this: ${this.getClass()} in root"
    println "method in root"
}

class Delegate{
    def method1(){
        println "Delegate this: ${this.getClass()} in delegate"
        println "method1 in Delegate"
    }

    def test(Closure<Delegate> closure){
        closure(this)
    }
}

task configClosure << {
    person {
        personName = "zhangsan"
        personAge = 20
        dumpPerson()
    }
}


def person(Closure<Person> closure){
    Person2 p = new Person2();
    closure.delegate = p;
    closure.setResolveStrategy(groovy.lang.Closure.DELEGATE_FIRST)
    closure(p)
}

class Person2{
    private String personName
    int personAge

    def dumpPerson(){
        println "name is ${personName}, age is ${personAge}"
    }
}


task customTask1{
    doFirst{
        println "customTask1 doFirst"
    }

    doLast{
        println "customTask1 doLast"
    }
}


tasks.create("customTask2"){
    doFirst{
        println "customTask2 doFirst"
    }

    doLast{
        println "customTask2 doLast"
    }
}


task ex35Hello << {
    println "ex35Hello hello"

}

task ex35World << {
    println "ex35Hello world"

}

task ex35Main (dependsOn:ex35Hello){
    doLast{
        println "ex35Main main"
    }
}

task ex35MultiTask{
    dependsOn ex35Hello,ex35World
    doLast{
        println "ex35MultiTask doLast"
    }
}


task ex36Hello << {
    println "ex36Hello"
}

ex36Hello.doFirst{
    println "ex36Hello doFirst"
}

ex36Hello.doLast{
    println project.hasProperty("ex36Hello")
    println "ex36Hello doLast"
}




ext.age = 50;

ext{
    phone = 123456
    address = "深圳"
}






task ex37CustomPropertie << {
    println "年龄是: ${age}"
    println "电话是:${phone}"
    println "地址是:${address}"

}



def buildTime(){
    def data = new Date();
    def formatDate = data.format("yyyyMMdd");
    formatDate
}

task printBuildTime << {
    println buildTime()
}


