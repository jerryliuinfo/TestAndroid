def Task ex41CreateTask1 = task("ex41CreateTask1")
ex41CreateTask1.doLast {
    println "创建方法原型为: Task task(String name)"
}



task ex41CreateTask3{
    description '演示任务创建'
    doLast{
        println "创建方法原型为:Task task(String name)"
        println "任务描述: ${description}"
    }
}

tasks.create('ex41CreateTask4'){
    description 'ex41CreateTask4 演示任务创建'
    doLast{
        println "ex41CreateTask4 创建方法原型为:Task task(String name)"
        println "ex41CreateTask4 任务描述: ${description}"
    }
}


task ex42AccessTask{
    println "hello ex42AccessTask"
}

ex42AccessTask.doLast{
    println "ex42AccessTask doLast"
}


tasks['ex42AccessTask'].doLast {
    println 'ex42AccessTask doLast2'
    println tasks.findByName('ex42AccessTask')
    println tasks.getByName('ex42AccessTask')
    println tasks.findByName('abc')
    println tasks.getByName('abc')
}


def Task myTask = task ex43GroupTask
myTask.group = BasePlugin.CLEAN_TASK_NAME
myTask.description = '这是一个构建的引导任务'
myTask.doLast {
    println "group:${group}, description: ${description}"
}

/*task ex44DoLoLast << {
    println "ex44DoLoLast"
}*/

task(ex44DoLoLast).doLast{
    println "ex44DoLast"
}

def Task myCustomTask = task ex45CustomTask(type: CustomTask)
myCustomTask.doFirst(){
    println "task执行之前 doFirst"
}

myCustomTask.doLast(){
    println "task执行之后 doLast"
}

class CustomTask extends DefaultTask{
    @TaskAction
    doSelf(){
        println 'Task本身自己在执行 in doSelf'
    }
}


task (ex46OrderTask1).doLast {
    println 'ex46OrderTask1'
}

task (ex46OrderTask2).doLast{
    println 'ex46OrderTask2'
}
ex46OrderTask1.mustRunAfter ex46OrderTask2


task(ex47DisableTask).doLast{
    println 'ex47DisableTask doLast'
}
ex47DisableTask.enabled = false






